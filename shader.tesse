#version 440 core

layout (quads , equal_spacing) in;//fractional_odd_spacing) in;

patch in highp vec3 normal;
patch in highp mat3 tbn;

in TSC_OUT
{
    vec2 tc;
    vec3 normal;
} tseIn[];

out TSE_OUT
{
    vec2 tc;
    float depth;
    vec4 normal;
} tseOut;

uniform sampler2D displacementMap;

uniform mat4 modelToWorld;
uniform mat4 worldToCamera;
uniform mat4 cameraToView;

void main(void)
{
    vec3 normal1 = mix(tseIn[0].normal, tseIn[1].normal, gl_TessCoord.x);
    vec3 normal2 = mix(tseIn[2].normal, tseIn[3].normal, gl_TessCoord.x);
    vec4 tempNormal = vec4(mix(normal1, normal2, gl_TessCoord.y), 1.0);
    tseOut.normal = tempNormal;
    vec2 tc1 = mix(vec2(1.0, 1.0), vec2(0.0, 1.0), gl_TessCoord.x);
    vec2 tc2 = mix(vec2(1.0, 0.0), vec2(0.0, 0.0), gl_TessCoord.x);
//    vec2 tc1 = mix(tseIn[0].tc, tseIn[1].tc, gl_TessCoord.x);
//    vec2 tc2 = mix(tseIn[2].tc, tseIn[3].tc, gl_TessCoord.x);
    tseOut.tc = mix(tc2, tc1, gl_TessCoord.y);

    vec4 p1 = mix(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_TessCoord.x);
    vec4 p2 = mix(gl_in[2].gl_Position, gl_in[3].gl_Position, gl_TessCoord.x);
    vec4 p = mix(p2, p1, gl_TessCoord.y);

    float height = texture(displacementMap, tseOut.tc).r;
    height = (height * 2) - 1;
    p += vec4(normal, 0.0) * height / 20.0;
    gl_Position = cameraToView * worldToCamera * modelToWorld * p;
    tseOut.depth = gl_Position.z;
}
